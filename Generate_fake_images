import cv2
import numpy as np
import os
import random

# Function to generate random non-overlapping shapes with controlled size
def generate_non_overlapping_shapes(image_size):
    image = np.zeros((image_size, image_size), dtype=np.uint8)

    def is_overlapping(shape, existing_shapes):
        for existing_shape in existing_shapes:
            if np.any(np.logical_and(shape, existing_shape)):
                return True
        return False

    shapes = []
    max_attempts = 50

    # Draw circles
    for _ in range(5):
        attempts = 0
        while attempts < max_attempts:
            center = np.random.randint(50, image_size - 50, size=2)
            radius = np.random.randint(2, 10)
            circle_mask = np.zeros_like(image)
            cv2.circle(circle_mask, tuple(center), radius, 255, -1)

            if not is_overlapping(circle_mask, shapes):
                shapes.append(circle_mask)
                break
            attempts += 1

    # Draw rectangles
    for _ in range(5):
        attempts = 0
        while attempts < max_attempts:
            start_point = np.random.randint(50, image_size - 50, size=2)
            end_point = start_point + np.random.randint(4, 20, size=2)
            rectangle_mask = np.zeros_like(image)
            cv2.rectangle(rectangle_mask, tuple(start_point), tuple(end_point), 255, -1)

            if not is_overlapping(rectangle_mask, shapes):
                shapes.append(rectangle_mask)
                break
            attempts += 1

    # Draw random shape (triangle)
    for _ in range(1):
        attempts = 0
        while attempts < max_attempts:
            vertices = np.random.randint(50, image_size - 50, size=(3,2))
            triangle_mask = np.zeros_like(image)
            cv2.drawContours(triangle_mask, [vertices], 0, 255, -1)

            if not is_overlapping(triangle_mask, shapes):
                shapes.append(triangle_mask)
                break
            attempts += 1

    for shape in shapes:
        image = np.maximum(image, shape)

    return image

# Function to apply random noise
def apply_noise(image):
    noise = np.random.normal(loc=0, scale=25, size=image.shape)
    noisy_image = np.clip(image + noise, 0, 255).astype(np.uint8)
    return noisy_image

# Generate a set of random images
output_folder = "H:\My Documents\Generated_image"
os.makedirs(output_folder, exist_ok=True)

num_images = 10
image_size = 200

for i in range(num_images):
    non_overlapping_shapes_image = generate_non_overlapping_shapes(image_size)
    noisy_non_overlapping_shapes_image = apply_noise(non_overlapping_shapes_image)
    image_path = os.path.join(output_folder, f"random_image_{i + 1}.tiff")
    cv2.imwrite(image_path, noisy_non_overlapping_shapes_image)
