# -*- coding: utf-8 -*-
"""
Created on Thu Dec  7 10:15:05 2023

@author: el4003ak
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from __future__ import division
import numpy as np
import glob
import matplotlib.pyplot as plt
import skimage.io
import skimage.color
import skimage.filters
import cv2
from scipy import ndimage
from skimage import io, color, measure, exposure, data
from skimage.measure import label, regionprops, regionprops_table
import pandas as pd
import matplotlib.pyplot as plt
import os
import scipy.ndimage 
import cv2
import glob
import IPython.display as ipd 
from tqdm.notebook import tqdm
import subprocess
import skimage.io 
from skimage import filters
from scipy.ndimage import gaussian_filter
from skimage.filters import rank
from skimage import data
from skimage.filters import *
import pickle

# Sample data
events = np.array(['Breaking and Merging', 'Deformation', 'Displacement', 'Rotation', 'Rotation and Deformation'])
occurrences = np.array([4, 68, 16, 92, 35])

# Sort data based on occurrences
sorted_indices = np.argsort(occurrences)
events_sorted = events[sorted_indices]
occurrences_sorted = occurrences[sorted_indices]

# Normalize occurrences to get probabilities
probabilities = occurrences_sorted / occurrences_sorted.sum()

# Reshape the probabilities array into a 2D array for plotting
probabilities_2d = probabilities.reshape(1, -1)

# Create a figure and axis
fig, ax = plt.subplots(1,1,figsize=(14,4))

# Use imshow to display the probability values as colors
im = ax.imshow(probabilities_2d, cmap='viridis', interpolation='nearest', aspect='auto')

# Set ticks and labels
ax.set_xticks(np.arange(len(events)))
ax.set_xticklabels(events)
ax.set_yticks([])  # No y-axis ticks

# Add a colorbar to show the mapping of colors to probabilities
cbar = ax.figure.colorbar(im, ax=ax)
cbar.set_label('Probability')

# Show the plot
plt.savefig('probability_colormap.pdf')


#Rotation Analysis
def elipse_drawing(image_path, output_path, x, y, w, h):
    # Load the grayscale image
    gray_image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Display the original image
    plt.imshow(gray_image, cmap='gray')
    plt.title('Original Image')
    plt.show()
    
    # Crop the image
    cropped_image = gray_image[y:y+h, x:x+w]
    
    # Display the cropped image
    plt.imshow(cropped_image, cmap='gray')
    plt.title('Cropped Image')
    plt.show()
    
    # Find contours in the preprocessed image using cv2.RETR_LIST
    contours, _ = cv2.findContours(cropped_image, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)
    
    # Filter out only the external contours
    external_contours = [cnt for cnt in contours if  1500 > cv2.contourArea(cnt) > 30]  # Adjust the area threshold as needed
    
    
    # Create an empty image to draw contours
    contour_image = np.zeros_like(cropped_image, dtype=np.uint8)
    
    # Draw contours on the empty image
    cv2.drawContours(contour_image, contours, -1, (255), thickness=2)
    
    # Display the original image
    plt.imshow(contour_image, cmap='gray')
    plt.title('Contour Image')
    plt.show()
    
    
    # Calculate the center of mass for each contour
    centers = []
    for contour in external_contours:
        M = cv2.moments(contour)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            centers.append((cX, cY))  # Adjust the center coordinates based on cropping
    # Find the center of mass for the object with the smallest y-coordinate
    min_y_center = min(centers, key=lambda c: c[1])
    
    # Calculate the center of mass for the rest of the objects
    other_centers = [center for center in centers if center != min_y_center]
    
    # Display the original image with contours
    image_with_contours = cv2.cvtColor(gray_image, cv2.COLOR_GRAY2BGR)
    cv2.drawContours(image_with_contours, contours, -1, (0, 255, 0), 2)
    
    # Mark the center of mass for the object with the smallest y-coordinate in red
    cv2.circle(image_with_contours, min_y_center, 5, (0, 0, 255), -1)
    
    # Mark the center of mass for the rest of the objects in blue
    for center in other_centers:
        cv2.circle(image_with_contours, center, 5, (255, 0, 0), -1)
    
    # Display the image with contours and marked centers
    plt.imshow(cv2.cvtColor(image_with_contours, cv2.COLOR_BGR2RGB))
    plt.title('Image with Contours and Marked Centers')
    plt.show()
    
    # Output the coordinates of the center of mass for the object with the smallest y-coordinate
    print("Center of Mass (Min Y):", min_y_center)
    
    # Output the coordinates of the center of mass for the rest of the objects
    print("Centers of Mass (Other Objects):", other_centers)
       
    #fit the objectsto elipse:
        
    # Create an empty image to draw ellipses
    ellipse_image = np.zeros_like(cropped_image, dtype=np.uint8)
    
    # Fit ellipses to the external contours
    ellipses = []
    for contour in external_contours:
        # Fit an ellipse to the contour
        ellipse = cv2.fitEllipse(contour)
        ellipses.append(ellipse)
    
        # Draw the ellipse on the image
        cv2.ellipse(ellipse_image, ellipse, (255), thickness=2)
    
    # Calculate rotation angles for consecutive ellipses
    rotation_angles = []
    for i in range(1, len(ellipses)):
        prev_angle = ellipses[i - 1][2]
        current_angle = ellipses[i][2]
        rotation_angle = current_angle - prev_angle
        rotation_angles.append(rotation_angle)
    
    # Display the original cropped image
    plt.imshow(cropped_image, cmap='gray')
    plt.title('Cropped Image')
    plt.show()
    
    # Save the ellipse image
    ellipse_output_path = os.path.join(output_path, f"{os.path.splitext(os.path.basename(image_path))[0]}_ellipses.png")
    cv2.imwrite(ellipse_output_path, ellipse_image)
    
    
    # Display the image with drawn ellipses
    plt.imshow(ellipse_image, cmap='gray')
    plt.title('Cropped Image with Ellipses')
    plt.show()
    
    # Output the rotation angles
    return print("Rotation Angles (degrees):", rotation_angles)
    
image_folder = r'C:\Users\el4003ak\Dropbox\PAPER_Bacteria_Clusters_MAY2023\Fast_camera_images\Displaced_mask_image_together\Mode_separation\Rotation/Z_outlet_100mbar_image_1_the_break_apart.png'
output_folder=r'C:\Users\el4003ak\Dropbox\PAPER_Bacteria_Clusters_MAY2023\Fast_camera_images\Displaced_mask_image_together\Mode_separation\Rotation\Elipses_images'
x_1, y_1, w_1, h_1 = 180, 38, 75, 220

elipse_drawing(image_folder, output_folder, x_1, y_1, w_1, h_1)


#Deformation
def deformation(image_path):
    try:
        binary_mask = skimage.io.imread(image_path, as_gray=True)
        # Check the data type
        # Apply thresholding to convert the image to binary
        threshold_value = skimage.filters.threshold_otsu(binary_mask)
        binary_mask = binary_mask > threshold_value
        binary_mask=~binary_mask
        
        x, y, w, h = 188, 38, 72, 215
        cropped_image = binary_mask[y:y+h, x:x+w]

        s = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
        labeled_mask_final, num_labels = ndimage.label(cropped_image, structure=s)
        imgcolor = color.label2rgb(labeled_mask_final, bg_label=0)

        props_table = measure.regionprops_table(labeled_mask_final, properties=('area', 'eccentricity', 'major_axis_length', 'minor_axis_length'))
        plt.imshow(imgcolor)
        plt.show()
        # Get the image name from the path
        image_name = os.path.basename(image_path)

        return imgcolor, props_table, image_name

    except Exception as e:
        print(f"Exception in {image_path}: {e}")
        return None, None

    


def batch_process(input_dir):
    """
    Process all images in a directory using image tiling.

    Args:
        input_dir (str): Path to the directory containing the images.

    Returns:
        all_imgcolor: List of processed images.
        all_props: List of region properties for each processed image.
    """
    filelist = glob.glob(input_dir + '/*.png')
    

    all_props = []
    all_imgcolor = []
    all_image_names = []
    success_counter = 0
    
    for filename in filelist:
        # Exception handling so the program can move on if one image fails for some reason.
        try:
           imgc, prop, image_name = deformation(filename)
           all_props.append(prop)
           all_imgcolor.append(imgc)
           all_image_names.append(image_name)
           success_counter += 1
            
            # Update the success counter       
        except Exception:
            from warnings import warn
            warn("There was an exception in " + filename + "!!!")
     
    # How many images were successfully analyzed?
    print ("Successfully analyzed", success_counter, "of", len(filelist), "images")
    
    return all_imgcolor, all_props, all_image_names, filelist

input_dirr=r'C:\Users\el4003ak\Dropbox\PAPER_Bacteria_Clusters_MAY2023\Fast_camera_images\Displaced_mask_image_together\Mode_separation\Deformation'

all_imgcolor, all_prop, all_image_names, filelist  = batch_process(input_dir=input_dirr)


all_props_1=pd.DataFrame({'area', 'eccentricity', 'major_axis_length', 'minor_axis_length'})



for i, prop in enumerate(all_prop):
    pd_i = pd.DataFrame(prop)
    
    # Extract file name from the path
    file_name = os.path.basename(filelist[i])
    
    # Add a new column for image name
    pd_i['image_name'] = [file_name] * len(prop['area'])
    
    all_props_1 = pd.concat([pd_i, all_props_1], axis=0, ignore_index=True)

# Calculating circularity
all_props_1['circularity'] = 4 * all_props_1['area'] / (all_props_1['major_axis_length'] + all_props_1['minor_axis_length'])**2
all_props_1['circularity'] = all_props_1['circularity'] * (4 / np.pi)  

print(all_props_1)

all_props_1.to_csv('deformation_data_2.csv', index=False)


#Deformation analysis

# Step 1: Read the CSV file
file_path = r'C:\Users\el4003ak\Dropbox\PAPER_Bacteria_Clusters_MAY2023\Fast_camera_images\Displaced_mask_image_together\Mode_separation\Deformation\deformation_data_2.csv'
all_props_1 = pd.read_csv(file_path)

all_props_1 = all_props_1.loc[all_props_1['circularity'] <= 1]
all_props_1 = all_props_1.loc[all_props_1['circularity'] >0.1]

all_props_1 = all_props_1.loc[all_props_1['major_axis_length']>=1]
all_props_1 = all_props_1.loc[all_props_1['major_axis_length']<100]

all_props_1 = all_props_1.loc[all_props_1['minor_axis_length']>=1]
all_props_1 = all_props_1.loc[all_props_1['minor_axis_length']<100]


# Step 2: Calculate the differences
differences = all_props_1.groupby('image_name').apply(lambda group: group['circularity'].diff())

# Step 3: Extract the first values for each group
first_values = all_props_1.groupby('image_name').first()

# Step 4: Create a Colormap Plot
fig, ax = plt.subplots()

scatter = ax.scatter(first_values['major_axis_length'], first_values['circularity'], c=abs(differences).groupby('image_name').first(), cmap='viridis')
cbar = plt.colorbar(scatter, label='Changes in circularity')

ax.set_xlabel('Major axis length')
ax.set_ylabel('Circularity')
ax.set_title('Scatterplot with Colorbar of Circularity Difference')

plt.show()


# Group by 'image_name'
grouped_data = all_props_1.groupby('image_name')

# Initialize the plot
fig, ax = plt.subplots(1,1,figsize=(42,26))

# Iterate over groups
for name, group in grouped_data:
    # Get the constant value for 'major_axis_length' (replace 'your_column_name' with the actual column name)
    constant_value_measured = group['major_axis_length'].iloc[0]
    
    # Create an array of constant values for the x-axis
    constant_array_measured = np.full_like(group['circularity'], constant_value_measured)

    # Plot the constant values against 'circularity'
    ax.scatter(constant_array_measured, group['circularity'], label=name, s=40)


ax.set_xlabel('Major Axis Length (constant value)', fontsize='36')
ax.set_ylabel('Circularity', fontsize='36')
# Set font size for both x and y-axis ticks
plt.tick_params(axis='both', labelsize=36)
#ax.legend(title='Image Name')

# Set the aspect ratio manually to increase the distance between values on the x-axis
#ax.set_aspect(50.0)  # Adjust this value as needed

# Set custom tick positions and labels for the x-axis
tick_positions = np.arange(0, len(grouped_data), step=5)  # Adjust this based on your preference
tick_labels = [group_name for i, group_name in enumerate(grouped_data) if i % 5 == 0]

ax.set_xticks(tick_positions)

# Show the plot
plt.show()


