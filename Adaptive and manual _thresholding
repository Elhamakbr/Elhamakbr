# -*- coding: utf-8 -*-
"""
Created on Thu Nov 23 18:23:23 2023

@author: el4003ak
"""

import skimage
import cv2
import matplotlib.pyplot as plt
from skimage import color, filters, measure, morphology, segmentation
from skimage import util
from skimage.measure import regionprops, regionprops_table
from scipy import ndimage
import numpy as np
import pandas as pd

def pipline_4(images):
    img = skimage.io.imread(images)
    img = cv2.resize(img, (0, 0), fx=0.5, fy=0.5)

    # Convert to grayscale using skimage
    gray_img = skimage.color.rgb2gray(img)
    gray_img = skimage.util.img_as_float(gray_img)

    # Use adaptive thresholding on the grayscale image
    binary_mask = cv2.adaptiveThreshold(
        (gray_img * 255).astype(np.uint8),  # Convert to uint8
        255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 7, 4
    )
    
    # Display adaptive thresholding result
    fig, ax = plt.subplots(1, 2, figsize=(12, 4))

    ax[0].imshow(binary_mask, cmap='gray')
    ax[0].set_title("Adaptive Thresholding")

    # Additional processing (e.g., second thresholding) on adaptive thresholding result
    t = 0.22
    binary_mask_additional = t < gray_img
    
    # Display additional processing result
    ax[1].imshow(binary_mask_additional, cmap='gray')
    ax[1].set_title("Additional Processing")

    plt.show()

    # Continue with the rest of your code (e.g., watershed segmentation)
    s = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
    labeled_mask, num_labels = ndimage.label(binary_mask_additional, structure=s)
    imgcolor = color.label2rgb(labeled_mask, bg_label=0)

    # Display the colored image
    plt.imshow(imgcolor)
    plt.title("Colored Image")
    plt.show()
    
    props = measure.regionprops(labeled_mask)
    props_table = regionprops_table(labeled_mask, properties=('area', 'eccentricity', 'major_axis_length', 'minor_axis_length'))
    
    return imgcolor, props_table


input_dirr=r'H:\My Documents\Generated_image\random_image_4.tiff'

#test_dir=r'Separation_06042023_D_180_5_large_2nd_20X.tif'
all_imgcolor, properties=pipline_4(images=input_dirr)

print(properties)
all_properties=pd.DataFrame(properties)
# Plotting the histogram
plt.hist(all_properties['major_axis_length'], bins=20, edgecolor='black')
plt.title('Histogram of circularity')
plt.xlabel('Major_axis_length')
plt.ylabel('Frequency')
plt.show()
