def pipline_4(images, thresh):
    img = skimage.io.imread(images)
    #img = cv2.resize(img, (0, 0), fx=0.5, fy=0.5)

    # Convert to grayscale using skimage
    gray_img = skimage.color.rgb2gray(img)
    gray_img = skimage.util.img_as_float(gray_img)
    
    blurred_img = skimage.filters.gaussian(gray_img, sigma=9)

    # Use adaptive thresholding on the grayscale image
    binary_mask = cv2.adaptiveThreshold(
        (blurred_img * 255).astype(np.uint8),  # Convert to uint8
        255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 7, 4
    )
    
    # Additional processing (e.g., second thresholding) on adaptive thresholding result
    t = thresh
    binary_mask_additional = t < gray_img
    
    # Display the results
    fig, ax = plt.subplots(1, 3, figsize=(18, 4))

    # Display adaptive thresholding result
    ax[0].imshow(binary_mask, cmap='gray')
    ax[0].set_title("Adaptive Thresholding")

    # Display additional processing result
    ax[1].imshow(binary_mask_additional, cmap='gray')
    ax[1].set_title("Additional Processing")

    # Calculate the histogram
    histogram, bin_edges = np.histogram(binary_mask, bins=256, range=(0, 1))

    # Plot the histogram
    ax[2].plot(bin_edges[0:-1], histogram)
    ax[2].set_title("Grayscale Histogram")
    ax[2].set_xlabel("Grayscale Value")
    ax[2].set_ylabel("Pixels")
    ax[2].set_xlim(0, 1.0)

    # Continue with the rest of your code (e.g., watershed segmentation)
    s = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
    labeled_mask, num_labels = ndimage.label(binary_mask_additional, structure=s)
    imgcolor = color.label2rgb(labeled_mask, bg_label=0)


    
    props = measure.regionprops(labeled_mask)
    props_table = measure.regionprops_table(labeled_mask, properties=('area', 'eccentricity', 'major_axis_length', 'minor_axis_length'))
    
    return imgcolor, props_table, histogram, bin_edges

# Example usage:

imgcolor, props_table, histogram, bin_edges=pipline_4(images=input_dirr, thresh=0.99)

# Show the colored image outside the function
plt.imshow(imgcolor)
plt.title("Colored Image")
plt.show()
