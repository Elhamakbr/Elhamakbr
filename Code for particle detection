
import cv2
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import skimage.io
import skimage.color
import skimage.filters
from scipy import ndimage
from skimage.measure import label, regionprops, regionprops_table
import os
import scipy.ndimage 
import cv2
import skimage.io 
from skimage import filters
from scipy.ndimage import gaussian_filter


#reading image, Not necessary, just to see the image before code.

scaled_img = skimage.io.imread(r'#image_path')
#img=cv2.resize(img, (0,0), fx=.5, fy=.5)
scaled_img = skimage.color.rgb2gray(scaled_img)
fig, ax = plt.subplots()
plt.imshow(scaled_img, cmap='gray')
plt.show()


#Drawing posts


def remove_concentric_rings(image_path, centers, common_radii):
    """
    Remove concentric rings from an image and replace them with average intensities.

    Args:
        image_path (str): Path to the input grayscale image.
        centers (list): List of (x, y) coordinates of the centers of the rings.
        common_radii (tuple): Tuple containing inner and outer radii for all rings.

    Returns:
        numpy.ndarray: Image with concentric rings replaced by average intensities.
    """
    # Load the grayscale image
    scaled_img = skimage.io.imread(image_path)
    scaled_img = skimage.color.rgb2gray(scaled_img)

    # Create masks for each center
    masks = []
    for center in centers:
        mask = np.zeros_like(scaled_img, dtype=np.uint8)

        # Calculate the distances from each pixel to the centerÃ¶o,
        distances = np.sqrt((np.arange(scaled_img.shape[0])[:, np.newaxis] - center[1])**2 +
                            (np.arange(scaled_img.shape[1]) - center[0])**2)

        # Create a binary mask for pixels within the ring region
        mask[(distances >= common_radii[0]) & (distances <= common_radii[1])] = 1
        masks.append(mask)

    # Calculate the average intensity for each center's rings
    average_intensities = []
    for mask in masks:
        average_intensities.append(np.mean(scaled_img[mask == 0]))

    # Set the pixels in each center's rings to the respective average intensity
    for mask, avg_intensity in zip(masks, average_intensities):
        scaled_img[mask == 1] = avg_intensity

    return scaled_img

# Example usage:
image_path = r'Path here'
center_coordinates = [(31, 46), (200, 200), (250, 250)]
common_radii = (0, 22)  # Inner and outer radii common to all rings

resulting_image = remove_concentric_rings(image_path, center_coordinates, common_radii)

# Display the resulting image
plt.imshow(resulting_image, cmap='gray')
plt.title('Image with Concentric Rings Replaced by Average Intensities')
plt.axis('off')
plt.show()


#particle detection


# Make binary mask

# Apply Gaussian blur if needed
blurred_img = skimage.filters.gaussian(resulting_image, sigma=2)
plt.imshow(blurred_img, cmap='gray')
plt.title('Image with Concentric Rings Replaced by Average Intensities')
plt.axis('off')
plt.show()

#Check the histogram of the image
histogram, bin_edges = np.histogram(blurred_img, bins=256, range=(0, 1))

plt.plot(bin_edges[0:-1], histogram)
plt.title("Grayscale Histogram")
plt.xlabel("grayscale value")
plt.ylabel("pixels")
plt.xlim(0, 1.0)
# plt.show()

t = 0.42 
binary_mask = t < blurred_img
fig, ax = plt.subplots()
plt.imshow(binary_mask, cmap='gray')
plt.show()

binary_mask = binary_mask.astype(np.uint8)

# Find contours in the binary mask
# Find contours in the binary mask
contours, _ = cv2.findContours(binary_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

# Define the minimum contour area threshold
min_contour_area = 100  # Adjust this value based on your image

# Filter contours by area
particle_contours = [cnt for cnt in contours if cv2.contourArea(cnt) > min_contour_area]

# Create an empty canvas with the same dimensions as the binary_mask
filled_canvas = np.zeros_like(binary_mask)

# Fill the areas enclosed by the contours
cv2.drawContours(filled_canvas, particle_contours, -1, (255, 255, 255), thickness=cv2.FILLED)

# Display the binary mask for reference
#plt.subplot(131), plt.imshow(binary_mask, cmap='gray'), plt.title('Binary Mask')


# Display the canvas with the filtered contours
plt.imshow(filled_canvas, cmap='gray'), plt.title('Filled Areas of detected particles')

plt.savefig('test.png')











